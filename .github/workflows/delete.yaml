name: TerraformDestroyAfterDeletedFeatureBranch
on:
  delete:
    branches:
    - 'test-rba-*'
    - 'TEST-RBA-*'
jobs:
  Run_Terraform_Destroy_After_Deleted_Feature_Branch:
    name: Terraform destroy on deleted branch
    runs-on: ubuntu-18.04
    env:
      # Terraform version to use
      TERRAFORM_VERSION: 0.12.20
      
      # location on the terraform files in github repo
      TERRAFORM_DIR: deploy/terraform

      # Terraform vars file
      TERRAFORM_VAR_FILE: app.tfvars
     
      # default branch of repo (used to fetch files 
      DEFAULT_BRANCH: master

      # other variables needed for terraform
      # "destroy" command, value is not important...
      TF_VAR_branch: ignored_for_destroy
      TF_VAR_image_repo_prefix: ignored_for_destroy
      TF_VAR_image_tag: ignored_for_destroy
      TF_VAR_deployment_env: ignored_for_destroy
      TF_VAR_disco_ssr_secret: ignored_for_destroy
    steps:
    - name: Configure AWS Credentials
      id: aws-config
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
    - name: Checkout default (master) branch (to have tf files)
      # We take the master branche because it's impossible to checkout the deleted branch.
      uses: actions/checkout@v2
      with:
        ref: $DEFAULT_BRANCH
    - name: Terraform init
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: $TERRAFORM_VERSION
        tf_actions_subcommand: 'init'
        args: -input=false -backend-config=bucket=tf-state-${{ steps.aws-config.outputs.aws-account-id }} -backend-config=key=${{github.event.repository.name}}/terraform.tfstate -backend-config=region=${{secrets.AWS_DEFAULT_REGION}} $TERRAFORM_DIR
        # Command in circleci Disco DISC-123
        # terraform init -backend-config=bucket=tf-state-${AWS_ACCOUNT_ID} -backend-config=key=${CIRCLE_PROJECT_REPONAME}/terraform.tfstate deploy/terraform
        # AWS_ACCOUNT_ID = ${{steps.aws-config.outputs.aws-account-id}}
        # CIRCLE_PROJECT_REPONAME = disco = ${{github.event.repository.name}}
        TF_WORKSPACE: ${{github.event.ref}}
    - name: wait for 1h
      run: sleep 3600
    - name: Print info
      run: |
        echo I was called because ${{github.event.ref_type}} ${{github.event.ref}} was ${{github.event_name}}...
        sleep 3600
        aws s3 ls tf-state-${{ steps.aws-config.outputs.aws-account-id }}
        terraform workspace list deploy/terraform
        terraform workspace select ${{github.event.ref}} deploy/terraform && terraform plan -destroy deploy/terraform
